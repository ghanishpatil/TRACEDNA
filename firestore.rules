rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is an analyst
    function isAnalyst() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/analysts/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/analysts/$(request.auth.uid)).data.role == 'analyst';
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/analysts/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/analysts/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Threats collection - only analysts can read/write
    match /threats/{threatId} {
      allow read, write: if isAnalyst();
      allow create: if isAuthenticated(); // Allow creation during ingestion
    }
    
    // Cases collection - only analysts can manage
    match /cases/{caseId} {
      allow read, write: if isAnalyst();
    }
    
    // TSDNA collection - only analysts can access
    match /tsdna/{tsdnaId} {
      allow read, write: if isAnalyst();
    }
    
    // Analysts collection - only admins can manage
    match /analysts/{analystId} {
      allow read: if isAnalyst();
      allow write: if isAdmin();
      allow create: if isAdmin();
    }
    
    // Audit logs - only analysts can read, system can write
    match /audit_logs/{logId} {
      allow read: if isAnalyst();
      allow create: if isAuthenticated();
    }
    
    // System configuration - only admins can access
    match /config/{configId} {
      allow read: if isAnalyst();
      allow write: if isAdmin();
    }
    
    // User profiles - users can read their own, admins can read all
    match /user_profiles/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Default rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
